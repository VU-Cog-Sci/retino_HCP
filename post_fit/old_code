
"rois": {   "BA17_V1_FRB08":"V1",   "BA18_V2_FRB08":"V2",   "V3d_KPO10":"V3d",      "V3A_SHM07":"V3A",      "V3B_SHM07":"V3B",
                "V4v_SHM07":"V4v",      "LO1_KPO10":"LO1",      "LO2_KPO10":"LO2",      "PITd_KPO10":"PITd",    "PITv_KPO10":"PITv",
                "hOc5_MT_FRB08":"MT",   "V7_SHM07":"V7",        "V6_PHG06":"V6",        "IPS1_SHM07":"IPS1",    "IPS2_SHM07":"IPS2",
                "IPS3_SHM07":"IPS3",    "IPS4_SHM07":"IPS4"},
def mask_gii_2_hdf5(in_file, mask_file, hdf5_file, folder_alias):
    """masks data in in_file with mask in mask_file,
    to be stored in an hdf5 file

    Takes a list of 3D or 4D fMRI nifti-files and masks the
    data with all masks in the list of nifti-files mask_files.
    These files are assumed to represent the same space, i.e.
    that of the functional acquisitions. 
    These are saved in hdf5_file, in the folder folder_alias.

    Parameters
    ----------
    in_files : list
        list of absolute path to functional nifti-files.
        all nifti files are assumed to have the same ndim
    mask_file : list
        list of absolute path to mask nifti-files.
        mask_files are assumed to be 3D
    hdf5_file : str
        absolute path to hdf5 file.
        folder_alias : str
                name of the to-be-created folder in the hdf5 file.

    Returns
    -------
    hdf5_file : str
        absolute path to hdf5 file.
    """
    import nibabel as nb
    import os.path as op
    import numpy as np
    import h5py
    import ipdb
    deb = ipdb.set_trace

    deb()

    gii_in_data = nb.load(in_file)
    data_mat = np.array([gii_in_data.darrays[i].data for i in range(len(gii_in_data.darrays))])
    data_name = op.split(in_file)[-1].split('.gii')[0]

    gii_in_mask = nb.load(mask_file)
    mask_mat = np.array([gii_in_mask.darrays[i].data for i in range(len(gii_in_mask.darrays))])
    mask_mat = mask_mat[0,:]
    mask_name = op.split(mask_file)[-1].split('.')[3]


    roi_data = data_mat[:, mask_mat==1]

    deb()
    try:
        h5file = h5py.File(hdf5_file, "r+")
    except:
        h5file = h5py.File(hdf5_file, "a")
    
    g_hemi = h5file.create_group(folder_alias)    
    dset = g_hemi.create_dataset(data_name,data = roi_data,dtype='float32')

    return None


# Get atlas for different region of interest
# ------------------------------------------
print('creating roi masks')
label_to_roi_cmd = """{main_cmd} -cifti-label-to-roi {label_in} {scalar_out} -name {label_name}"""
cifti_separate_cmd = """{main_cmd} -cifti-separate {cifti_in} COLUMN -metric CORTEX_LEFT {label_out_L} -metric CORTEX_RIGHT {label_out_R}"""

for roi in analysis_info['rois']:
    
    label_in = opj(base_dir,'raw_data/surfaces/atlas','Conte69.parcellations_VGD11b.32k_fs_LR.dlabel.nii')
    scalar_out = opj(base_dir,'raw_data/surfaces/atlas','Conte69.parcellations_VGD11b.32k_fs_LR.{label_name}.dscalar.nii'.format(label_name = roi))

    os.system(label_to_roi_cmd.format(  main_cmd = main_cmd,
                                        label_in = label_in, 
                                        scalar_out = scalar_out, 
                                        label_name = roi))

    cifti_in = scalar_out
    label_out_L = opj(base_dir,'raw_data/surfaces/atlas','Conte69.parcellations_VGD11b.32k_fs_LR.{label_name}.dlabel.L.func.gii'.format(label_name = roi))
    label_out_R = opj(base_dir,'raw_data/surfaces/atlas','Conte69.parcellations_VGD11b.32k_fs_LR.{label_name}.dlabel.R.func.gii'.format(label_name = roi))
    
    os.system(cifti_separate_cmd.format(main_cmd = main_cmd,
                                        cifti_in = cifti_in,
                                        label_out_L = label_out_L,
                                        label_out_R = label_out_R))

# Save ROIS data in hdf5
# ----------------------
print('creating h5 files')
for roi in analysis_info['rois']:
    
    h5_dir = opj(base_dir,'pp_data',subject,fit_model,'h5')
    try: os.makedirs(h5_dir)
    except OSError: pass
    h5_file = opj(h5_dir,'{roi}.h5'.format(roi = analysis_info['rois'][roi]))
    try: os.system('rm '+ h5_file)
    except: pass

    for hemi in ['L','R']:
        
        mask_file = glob.glob(opj(base_dir,'raw_data/surfaces/atlas','*{roi}.dlabel.{hemi}.func.gii'.format(roi = roi, hemi = hemi)))
        mask_file = mask_file[0]
        
        for mask_dir in ['all','pos','neg']:
            
            in_file = opj(deriv_dir,mask_dir,"prf_deriv_{hemi}_{mask_dir}.gii".format(hemi = hemi, mask_dir = mask_dir))
            folder_alias = '{hemi}_{mask_dir}'.format(hemi = hemi,mask_dir = mask_dir)
            
            mask_gii_2_hdf5(in_file = in_file,
                            mask_file = mask_file,
                            hdf5_file = h5_file,
                            folder_alias = folder_alias)

            # in_file = opj(base_dir,"pp_data",subject,fit_model,"fit","{bfn}_{hemi}.func_bla_psc_pred.gii".format(hemi = hemi,bfn = base_file_name))
            # folder_alias = '{hemi}_{mask_dir}'.format(hemi = hemi,mask_dir = mask_dir)
            # mask_gii_2_hdf5(in_file = in_file,
            #                 mask_file = mask_file,
            #                 hdf5_file = h5_file,
            #                 folder_alias = folder_alias)